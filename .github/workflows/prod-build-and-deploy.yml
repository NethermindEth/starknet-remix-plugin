name: (prod) Manual build & deploy
on: 
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag'
        required: true
        type: string

permissions:
      id-token: write
      contents: read

env:
  REGISTRY: "599564732950.dkr.ecr.us-east-2.amazonaws.com"
  REPOSITORY: "starknet-remix-plugin"
  CLUSTER: "starknet-remix-plugin-ecs-cluster"
  SERVICE_NAME: "rocket-development-svc"
  
jobs:
  BuildAPI:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Apply release tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ inputs.version }}
          tag_exists_error: false
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::599564732950:role/Aws-GH-Action-Assume-Role-Starknet
          role-session-name: GHStarknet
    
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Update local Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable -y
          rustup update
          rustup component add clippy
          rustup install nightly          

      - name: Toolchain info
        run: |
          cargo --version --verbose
          rustc --version
          cargo clippy --version          

      - name: Build
        run: |
          cd api
          cargo build           
          ls ./target/debug/ -al

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ inputs.version }}
        run: |
          docker build --target final -t $REGISTRY/$REPOSITORY:apiserver-$IMAGE_TAG -f ./DockerfileApiServer .
          docker push $REGISTRY/$REPOSITORY:apiserver-$IMAGE_TAG

  BuildReact:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Setup Node ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install -g pnpm

      - name: pnpm install
        working-directory: ./plugin
        run: pnpm install
      
      - name: pnpm build
        working-directory: ./plugin
        run: pnpm run build

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: react-github-actions-build
          path: ./plugin/build/**/*

