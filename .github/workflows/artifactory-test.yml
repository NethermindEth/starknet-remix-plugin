name: Test Artifactory Workflow

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - feature/push_image_to_artifactory

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: nethermind.jfrog.io
  REPO_DEV: nubia-oci-local-dev
  REPO_STAGING: nubia-oci-local-staging
  REPO_PROD: nubia-oci-local-prod
  NODE_VERSION: '20.x'
  PROD_BUCKET_NAME: 'starknet-remix-plugin-prod'

permissions:
  id-token: write
  contents: write

jobs:
  # BuildAPI:
  #   name: Build Docker Image
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Set up ORAS
  #       uses: oras-project/setup-oras@v1

  #     - name: Verify ORAS version
  #       run: oras version

  #     - uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.DOCKER_REGISTRY }}
  #         username: ${{ secrets.ARTIFACTORY_NUBIA_USERNAME }}
  #         password: ${{ secrets.ARTIFACTORY_NUBIA_TOKEN_DEVELOPER }}

  #     - name: Login to registry with ORAS
  #       run: |
  #         oras login ${{ env.DOCKER_REGISTRY }} \
  #           -u ${{ secrets.ARTIFACTORY_NUBIA_USERNAME }} \
  #           -p ${{ secrets.ARTIFACTORY_NUBIA_TOKEN_DEVELOPER }}

  #     - name: Get Scarb version
  #       id: get_scarb_version
  #       run: |
  #         SCARB_VERSION=$(cat .scarb-version | sed 's/v//') 
  #         echo "scarb_version=${SCARB_VERSION}" >> $GITHUB_ENV

  #     - name: Build, tag, and push docker image to Amazon ECR
  #       env:
  #         REGISTRY: ${{ env.DOCKER_REGISTRY }}
  #         REPOSITORY: ${{ env.REPO_DEV }}
  #         IMAGE_TAG: latest
  #       run: |
  #         docker build -t $REGISTRY/$REPOSITORY:apiserver-$IMAGE_TAG --build-arg=SCARB_VERSION=${{ env.scarb_version }} -f ./DockerfileRocket .
  #         docker push $REGISTRY/$REPOSITORY:apiserver-$IMAGE_TAG

  BuildReact:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        
      - name: Inject version
        env:
          VERSION: 1.2.3
        run: |
          export STRIPPED_VERSION=${VERSION/v/}
          sed -i "s/\"version\"\:[ ]\"[0-9].[0-9]*.[0-9]*\"/\"version\": \"$STRIPPED_VERSION\"/g" ./plugin/package.json

      - name: Setup Node ${{ env.NODE_VERSION }} Environment
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install -g pnpm

      - name: pnpm install
        working-directory: ./plugin
        run: pnpm install
      
      - name: pnpm build
        working-directory: ./plugin
        run: pnpm run build

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: react-github-actions-build
          path: ./plugin/build/**/*

  DeployReact:
    runs-on: ubuntu-latest
    needs: [BuildReact] #BuildAPI]
    steps:

      - name: Get artifact
        uses: actions/download-artifact@v4
        with:
          name: react-github-actions-build
          path: artifact

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::228016254426:role/starknet-remix-plugin-github-oidc-role
          role-session-name: GHStarknet

      - name: Deploy to S3
        run: |
          aws s3 sync . s3://${{ env.PROD_BUCKET_NAME }} --acl public-read
        working-directory: artifact